{"version":3,"sources":["instrument-library/Instrument.js","instrument-library/startingInstruments.js","instrument-library/InstrumentLibrary.js","MapForm.js","MapMenu.js","Map.js","Play.js","NavItem.js","Nav.js","NoteMappingItem.js","NoteMapping.js","EnableSound.js","LoadingIndicator.js","App.js","reportWebVitals.js","index.js"],"names":["Instrument","name","noteToFile","this","isLoaded","sampler","instruments","piano","cello","InstrumentLibrary","baseUrl","process","startingInstruments","instrumentNames","a","map","instrumentName","promises","instrument","push","Promise","res","rej","toneSampler","Tone","urls","onload","onerror","err","toDestination","all","Object","values","filter","MapForm","props","state","chars","note","octave","duration","velocity","handleInputChanges","bind","handleSubmit","event","target","value","type","checked","setState","preventDefault","char","updateCharMapping","Number","className","onSubmit","htmlFor","onChange","index","Array","fill","_","onClick","resetMapping","Component","newMapName","useMapping","createMapping","getAttribute","orderedCharMaps","charMap","href","identity","style","display","Map","charMaps","sort","b","activeCharMapIdentity","MapMenu","sortCharMaps","Play","instrumentLibrary","onKeyPress","charCode","which","String","fromCharCode","charMapping","getInstrument","triggerAttackRelease","notes","undefined","id","cols","rows","NavItem","text","active","setMode","classNames","Nav","mode","NoteMappingItem","NoteMapping","charMappingArray","entries","mapping","entry","charMappingItem","EnableSound","enableSound","LoadingIndicator","App","localStorage","getItem","uuid","setItem","firstCharMaps","JSON","parse","stringify","removeItem","isSoundEnabled","isLoading","loadInstruments","load","alert","console","log","start","pst","newMapping","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba5adefa.chunk.js","sourcesContent":["\nclass Instrument {\n    constructor({\n        name,\n        noteToFile\n    }) {\n        this.name = name;\n        this.noteToFile = noteToFile;\n        this.isLoaded = false;\n        this.sampler = null;\n    }\n}\n\nexport default Instrument;","import Instrument from './Instrument';\n\nconst instruments = {\n    piano: new Instrument({\n        name: 'piano',\n        noteToFile: {\n            'A0': 'A0.[mp3|ogg]',\n            'A1': 'A1.[mp3|ogg]',\n            'A2': 'A2.[mp3|ogg]',\n            'A3': 'A3.[mp3|ogg]',\n            'A4': 'A4.[mp3|ogg]',\n            'A5': 'A5.[mp3|ogg]',\n            'A6': 'A6.[mp3|ogg]',\n            'A#0': 'As0.[mp3|ogg]',\n            'A#1': 'As1.[mp3|ogg]',\n            'A#2': 'As2.[mp3|ogg]',\n            'A#3': 'As3.[mp3|ogg]',\n            'A#4': 'As4.[mp3|ogg]',\n            'A#5': 'As5.[mp3|ogg]',\n            'A#6': 'As6.[mp3|ogg]',\n            'B0': 'B0.[mp3|ogg]',\n            'B1': 'B1.[mp3|ogg]',\n            'B2': 'B2.[mp3|ogg]',\n            'B3': 'B3.[mp3|ogg]',\n            'B4': 'B4.[mp3|ogg]',\n            'B5': 'B5.[mp3|ogg]',\n            'B6': 'B6.[mp3|ogg]',\n            'C0': 'C0.[mp3|ogg]',\n            'C1': 'C1.[mp3|ogg]',\n            'C2': 'C2.[mp3|ogg]',\n            'C3': 'C3.[mp3|ogg]',\n            'C4': 'C4.[mp3|ogg]',\n            'C5': 'C5.[mp3|ogg]',\n            'C6': 'C6.[mp3|ogg]',\n            'C7': 'C7.[mp3|ogg]',\n            'C#0': 'Cs0.[mp3|ogg]',\n            'C#1': 'Cs1.[mp3|ogg]',\n            'C#2': 'Cs2.[mp3|ogg]',\n            'C#3': 'Cs3.[mp3|ogg]',\n            'C#4': 'Cs4.[mp3|ogg]',\n            'C#5': 'Cs5.[mp3|ogg]',\n            'C#6': 'Cs6.[mp3|ogg]',\n            'D0': 'D0.[mp3|ogg]',\n            'D1': 'D1.[mp3|ogg]',\n            'D2': 'D2.[mp3|ogg]',\n            'D3': 'D3.[mp3|ogg]',\n            'D4': 'D4.[mp3|ogg]',\n            'D5': 'D5.[mp3|ogg]',\n            'D6': 'D6.[mp3|ogg]',\n            'D#0': 'Ds0.[mp3|ogg]',\n            'D#1': 'Ds1.[mp3|ogg]',\n            'D#2': 'Ds2.[mp3|ogg]',\n            'D#3': 'Ds3.[mp3|ogg]',\n            'D#4': 'Ds4.[mp3|ogg]',\n            'D#5': 'Ds5.[mp3|ogg]',\n            'D#6': 'Ds6.[mp3|ogg]',\n            'E0': 'E0.[mp3|ogg]',\n            'E1': 'E1.[mp3|ogg]',\n            'E2': 'E2.[mp3|ogg]',\n            'E3': 'E3.[mp3|ogg]',\n            'E4': 'E4.[mp3|ogg]',\n            'E5': 'E5.[mp3|ogg]',\n            'E6': 'E6.[mp3|ogg]',\n            'F0': 'F0.[mp3|ogg]',\n            'F1': 'F1.[mp3|ogg]',\n            'F2': 'F2.[mp3|ogg]',\n            'F3': 'F3.[mp3|ogg]',\n            'F4': 'F4.[mp3|ogg]',\n            'F5': 'F5.[mp3|ogg]',\n            'F6': 'F6.[mp3|ogg]',\n            'F#0': 'Fs0.[mp3|ogg]',\n            'F#1': 'Fs1.[mp3|ogg]',\n            'F#2': 'Fs2.[mp3|ogg]',\n            'F#3': 'Fs3.[mp3|ogg]',\n            'F#4': 'Fs4.[mp3|ogg]',\n            'F#5': 'Fs5.[mp3|ogg]',\n            'F#6': 'Fs6.[mp3|ogg]',\n            'G0': 'G0.[mp3|ogg]',\n            'G1': 'G1.[mp3|ogg]',\n            'G2': 'G2.[mp3|ogg]',\n            'G3': 'G3.[mp3|ogg]',\n            'G4': 'G4.[mp3|ogg]',\n            'G5': 'G5.[mp3|ogg]',\n            'G6': 'G6.[mp3|ogg]',\n            'G#0': 'Gs0.[mp3|ogg]',\n            'G#1': 'Gs1.[mp3|ogg]',\n            'G#2': 'Gs2.[mp3|ogg]',\n            'G#3': 'Gs3.[mp3|ogg]',\n            'G#4': 'Gs4.[mp3|ogg]',\n            'G#5': 'Gs5.[mp3|ogg]',\n            'G#6': 'Gs6.[mp3|ogg]'\n        }\n    }),\n    cello: new Instrument({\n        name: 'cello',\n        noteToFile: {\n            'E3': 'E3.[mp3|ogg]',\n            'E4': 'E4.[mp3|ogg]',\n            'F2': 'F2.[mp3|ogg]',\n            'F3': 'F3.[mp3|ogg]',\n            'F4': 'F4.[mp3|ogg]',\n            'F#3': 'Fs3.[mp3|ogg]',\n            'F#4': 'Fs4.[mp3|ogg]',\n            'G2': 'G2.[mp3|ogg]',\n            'G3': 'G3.[mp3|ogg]',\n            'G4': 'G4.[mp3|ogg]',\n            'G#2': 'Gs2.[mp3|ogg]',\n            'G#3': 'Gs3.[mp3|ogg]',\n            'G#4': 'Gs4.[mp3|ogg]',\n            'A2': 'A2.[mp3|ogg]',\n            'A3': 'A3.[mp3|ogg]',\n            'A4': 'A4.[mp3|ogg]',\n            'A#2': 'As2.[mp3|ogg]',\n            'A#3': 'As3.[mp3|ogg]',\n            'A#4': 'As4.[mp3|ogg]',\n            'B2': 'B2.[mp3|ogg]',\n            'B3': 'B3.[mp3|ogg]',\n            'B4': 'B4.[mp3|ogg]',\n            'C2': 'C2.[mp3|ogg]',\n            'C3': 'C3.[mp3|ogg]',\n            'C4': 'C4.[mp3|ogg]',\n            'C5': 'C5.[mp3|ogg]',\n            'C#3': 'Cs3.[mp3|ogg]',\n            'C#4': 'Cs4.[mp3|ogg]',\n            'D2': 'D2.[mp3|ogg]',\n            'D3': 'D3.[mp3|ogg]',\n            'D4': 'D4.[mp3|ogg]',\n            'D#2': 'Ds2.[mp3|ogg]',\n            'D#3': 'Ds3.[mp3|ogg]',\n            'D#4': 'Ds4.[mp3|ogg]',\n            'E2': 'E2.[mp3|ogg]'\n        }\n    })\n};\n\nexport default instruments;","import * as Tone from 'tone';\nimport startingInstruments from './startingInstruments';\n\nclass InstrumentLibrary {\n    constructor() {\n        // this.baseUrl = 'https://instrument-samples.s3.amazonaws.com';\n        this.baseUrl = `${process.env.PUBLIC_URL}/instruments`;\n        // available instruments to be loaded\n        this.instruments = startingInstruments;\n    }\n\n    async load(instrumentNames) {\n        const instruments = instrumentNames.map(instrumentName => this.instruments[instrumentName]);\n        const promises = [];\n    \n        for (const instrument of instruments) {\n            if (instrument.isLoaded) {\n                continue;\n            }\n\n            promises.push(new Promise((res, rej) => {\n                const toneSampler = new Tone.Sampler({\n                    baseUrl: `${this.baseUrl}/${instrument.name}/`,\n                    urls: instrument.noteToFile,\n                    onload: () => {\n                        instrument.sampler = toneSampler;\n                        instrument.isLoaded = true;\n                        res();\n                    },\n                    onerror: (err) => {\n                        rej(err);\n                    }\n                });\n\n                toneSampler.toDestination();\n            }));\n        }\n\n        return await Promise.all(promises);\n    }\n\n    getInstrument(instrumentName) {\n        return this.instruments[instrumentName];\n    }\n\n    getLoadedInstruments() {\n        return Object.values(this.instruments).filter(instrument => instrument.isLoaded);\n    }\n}\n\nexport default InstrumentLibrary;","import React, { Component } from 'react';\nimport './MapForm.css';\n\nclass MapForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chars: '',\n            note: 'C',\n            octave: '3',\n            duration: 2000,\n            velocity: 100,\n            // TODO: handle situation here and below where no instruments passed (or it's just empty array?)\n            instrument: this.props.instruments[0]\n        };\n\n        this.handleInputChanges = this.handleInputChanges.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChanges(event) {\n        const target = event.target;\n        const name = target.name;\n        let value = target.type === 'checkbox' ? target.checked : target.value;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        // TODO: check that char is only one long and throw alert if not\n\n        // TODO: check if it is a valid char value... for now just block duplicate char, later\n        // could have it be an option to use this input and clear other note\n\n        // or should the it just be you press a char then assign it to a note... might be best\n        // since then multiple chars to same note\n        // I think ideally you even could assign an array of notes to be triggered on a key press\n        // but can add that later with duration as well\n\n        for (const char of this.state.chars) {\n            this.props.updateCharMapping(char, {\n                note: this.state.note + this.state.octave,\n                duration: Number(this.state.duration),\n                velocity: Number(this.state.velocity) / 127.0,\n                instrument: this.state.instrument\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"map-form-container\">\n                <form className=\"map-form\" onSubmit={this.handleSubmit}>\n                    <div className=\"map-form__instrument\">\n                        <label htmlFor=\"instrument\">Instrument: </label>\n                        <select name=\"instrument\" value={this.state.instrument} onChange={this.handleInputChanges}>\n                            {this.props.instruments.map((instrument, index) => (<option value={instrument} key={index} >{instrument}</option>))}\n                        </select>\n                    </div>\n                    <div className=\"map-form__chars\">\n                        <label htmlFor=\"chars\">Char(s): </label>\n                        <input name=\"chars\" type=\"text\" onChange={this.handleInputChanges} />\n                    </div>\n                    <div className=\"map-form__note\">\n                        <label htmlFor=\"note\">Note: </label>\n                        <select name=\"note\" value={this.state.note} onChange={this.handleInputChanges}>\n                            <option value=\"C\">C</option>\n                            <option value=\"C#\">C#</option>\n                            <option value=\"D\">D</option>\n                            <option value=\"D#\">D#/Eb</option>\n                            <option value=\"E\">E</option>\n                            <option value=\"F\">F</option>\n                            <option value=\"F#\">F#/Gb</option>\n                            <option value=\"G\">G</option>\n                            <option value=\"G#\">G#/Ab</option>\n                            <option value=\"A\">A</option>\n                            <option value=\"A#\">A#/Bb</option>\n                            <option value=\"B\">B</option>\n                        </select>\n                    </div>\n                    <div className=\"map-form__octave\">\n                        <label htmlFor=\"octave\">Octave: </label>\n                        <select name=\"octave\" value={this.state.octave} onChange={this.handleInputChanges}>\n                            {Array(11).fill().map((_, index) => (<option value={index - 1} key={index - 1} >{index - 1}</option>))}\n                        </select>\n                    </div>\n                    {/* TODO: ADD channel (instrument), duration, velocity */}\n                    <div className=\"map-form__duration\">\n                        <label htmlFor=\"duration\">Duration(ms): </label>\n                        <input name=\"duration\" type=\"text\" value={this.state.duration} onChange={this.handleInputChanges} />\n                    </div>\n                    <div className=\"map-form__velocity\">\n                        <label htmlFor=\"velocity\">Velocity: </label>\n                        <select name=\"velocity\" value={this.state.velocity} onChange={this.handleInputChanges}>\n                            {Array(128).fill().map((_, index) => (<option value={index} key={index} >{index}</option>))}\n                        </select>\n                    </div>\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n\n                <button className=\"map-form__reset\" onClick={this.props.resetMapping} >Reset Current Mapping</button>\n            </div>\n        );\n    }\n}\n\nexport default MapForm;","import React, { Component } from 'react';\nimport './MapForm.css';\n\nclass MapForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            newMapName: '',\n        };\n\n        this.handleInputChanges = this.handleInputChanges.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.useMapping = this.useMapping.bind(this);\n    }\n\n    handleInputChanges(event) {\n        const target = event.target;\n        const name = target.name;\n        let value = target.type === 'checkbox' ? target.checked : target.value;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        // create a new mapping and set it as the activeMapping\n        this.props.createMapping(this.state.newMapName);\n        this.setState({ newMapName: '' });\n    }\n\n    useMapping(event) {\n        event.preventDefault();\n        this.props.useMapping(event.target.getAttribute('href'));\n    }\n\n    render() {\n        return (\n            <div className=\"map-menu-container\">\n                {/* create form with name and a button to submit */}\n                <br/>\n                <div>Create New Mapping</div>\n                <form className=\"map-create-form\" onSubmit={this.handleSubmit}>\n                    <label htmlFor=\"newMapName\">Map Name: </label>\n                    <input name=\"newMapName\" type=\"text\" onChange={this.handleInputChanges} />\n                    <input type=\"submit\" value=\"Create\" />\n                </form>\n                {/* list of links of Object.values of the charMaps */}\n\n                <br/>\n                {this.props.orderedCharMaps.map((charMap, index) => (<a onClick={this.useMapping} href={charMap.identity} key={index} style={{ display: 'block' }}>{charMap.name}</a>))}\n            </div>\n        );\n    }\n}\n\nexport default MapForm;","import React, { Component } from 'react';\nimport MapForm from './MapForm';\nimport MapMenu from './MapMenu';\n\nclass Map extends Component {\n    sortCharMaps(charMaps) {\n        return Object.values(charMaps).sort((a, b) => {\n            if (a.name < b.name) {\n                return -1;\n            }\n\n            if (a.name > b.name) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"map-container\">\n                <MapForm \n                    updateCharMapping={this.props.updateCharMapping}\n                    resetMapping={this.props.resetMapping}\n                    instruments={this.props.charMaps[this.props.activeCharMapIdentity].instruments}\n                />\n                <MapMenu\n                    createMapping={this.props.createMapping}\n                    orderedCharMaps={this.sortCharMaps(this.props.charMaps)}\n                    useMapping={this.props.useMapping}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Map;","import React, { Component } from 'react';\n\nclass Play extends Component {\n    constructor(props) {\n        super(props);\n\n        this.instrumentLibrary = props.instrumentLibrary;\n\n        this.onKeyPress = this.onKeyPress.bind(this);\n    }\n\n    onKeyPress(event) {\n        // check which key is pressed, use map (passed in props) to output a midi ON and trigger a midi OFF for some delay\n        const charCode = event.which;\n        const char = String.fromCharCode(charCode);\n        \n        // if the char has a mapping set\n        if (this.props.charMapping[char]) {\n            const charMap = this.props.charMapping[char];\n           this.instrumentLibrary.getInstrument(charMap.instrument).sampler\n                .triggerAttackRelease(charMap.notes, charMap.duration / 1000.0, undefined, charMap.velocity);\n        }\n    }\n\n    render() {\n        return (\n            <textarea name=\"text\" id=\"\" cols=\"30\" rows=\"10\" onKeyPress={this.onKeyPress}></textarea>\n        );\n    }\n}\n\nexport default Play;","import React from 'react';\nimport classNames from 'classnames';\nimport './NavItem.css';\n\nconst NavItem = ({\n    text,\n    active,\n    setMode\n}) => (\n    <button\n        className={classNames('nav__item', {\n            'nav__item--active': active\n        })}\n        onClick={setMode}\n    >\n        {text}\n    </button>\n);\n\nexport default NavItem;","import React from 'react';\nimport NavItem from './NavItem';\nimport './Nav.css';\n\nconst Nav = ({ mode, setMode }) => (\n    <nav className='nav'>\n        <NavItem\n            text='Map'\n            active={mode === 'MAP'}\n            setMode={() => setMode('MAP')}\n        />\n        <NavItem\n            text='Play'\n            active={mode === 'PLAY'}\n            setMode={() => setMode('PLAY')}\n        />\n    </nav>\n);\nexport default Nav;","import React from 'react';\nimport './NoteMappingItem.css';\n\nconst NoteMappingItem = ({\n    note,\n    char\n}) => (\n    <div className='note-mapping__item'>\n        {`${char} - ${note}`}\n    </div>\n);\n\n\nexport default NoteMappingItem;","import React from 'react';\nimport './NoteMapping.css';\nimport NoteMappingItem from './NoteMappingItem';\n\nconst NoteMapping = ({\n    charMap\n}) => {\n    // set charMap to sorted array\n    const charMappingArray = Object.entries(charMap.mapping).map(entry => {\n        return {\n            char: entry[0],\n            values: entry[1]\n        }\n    }).sort((a, b) => {\n        return b < a ? b : a;\n    });\n\n    return (\n        <div>\n            <div>{charMap.name}</div>            \n            <div className='note-mapping'>\n                {\n                    charMappingArray.map(charMappingItem => (\n                        <NoteMappingItem\n                            key={charMappingItem.char}\n                            note={charMappingItem.values.notes[0]}\n                            char={charMappingItem.char}\n                        />\n                    ))\n                }\n            </div>\n        </div>\n    );\n}\n\n\nexport default NoteMapping;","import React from 'react';\nimport './EnableSound.css';\n\nconst EnableSound = ({ enableSound }) => (\n    <div className=\"enable-sound\">\n        <button className=\"enable-sound__button\" onClick={enableSound} >Click Here To Enable Sound</button>\n    </div>\n);\nexport default EnableSound;","import './LoadingIndicator.css';\n\nconst LoadingIndicator = () => (\n    <div className=\"loading-indicator\">\n        Loading Instruments...\n    </div>\n);\n\nexport default LoadingIndicator;","import React, { Component } from 'react';\nimport * as Tone from 'tone';\nimport * as uuid from 'uuid';\nimport InstrumentLibrary from './instrument-library/InstrumentLibrary';\nimport './App.css';\nimport Map from './Map';\nimport Play from './Play';\nimport Nav from './Nav';\nimport NoteMapping from './NoteMapping';\nimport EnableSound from './EnableSound';\nimport LoadingIndicator from './LoadingIndicator';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        // TODO:\n        // -- DEPLOY THIS VERSION TELL YVETTE --\n        // try figuring out s3 permissions... probably just wait until next phase\n        // add component for selecting instruments to load when you get to the page\n        // have instruments that were loaded saved in local storage so they load on arriving\n        // change form to select instrument first (then only give options based off that)\n        // once get it where it was but with loaded instruments, stop\n        // make so can enter multiple notes for a char\n        // make so can map to special keys like ENTER\n        // change so user can have multiple maps\n\n        // const exampleCharMap = {\n        //     identity: 'ty73738he',\n        //     name: 'My First Mapping',\n        //     instruments: ['piano', 'cello'],\n        //     mapping: {\n\n        //     }\n        // };\n\n        // maybe set something in local storage and check for that to clear info or not?\n        // TODO: make a version nchanghe and havee it look for 'charMapping' and then save that\n        // as activeCharMap and in the charMaps object in local storage\n        if (!localStorage.getItem('version') || localStorage.getItem('version') !== '.3') {\n            const identity = uuid.v4();\n            localStorage.setItem('activeCharMapIdentity', identity);\n            const firstCharMaps = {\n                [identity]: {\n                    identity,\n                    name: 'First Mapping',\n                    instruments: ['piano', 'cello'],\n                    mapping: localStorage.getItem('charMapping') ? JSON.parse(localStorage.getItem('charMapping')) : {}\n                }\n            };\n            localStorage.setItem('charMaps', JSON.stringify(firstCharMaps));\n\n            localStorage.removeItem('charMapping');\n            localStorage.removeItem('loadedInstruments');\n        }\n        localStorage.setItem('version', '.3');\n\n        this.instrumentLibrary = new InstrumentLibrary();\n        this.state = {\n            isSoundEnabled: false,\n            isLoading: false,\n            mode: localStorage.getItem('mode') || 'MAP',\n            activeCharMapIdentity: localStorage.getItem('activeCharMapIdentity'),\n            charMaps: localStorage.getItem('charMaps') ? JSON.parse(localStorage.getItem('charMaps')) : {}\n        };\n\n        this.setMode = this.setMode.bind(this);\n        this.updateCharMapping = this.updateCharMapping.bind(this);\n        this.resetMapping = this.resetMapping.bind(this);\n        this.enableSound = this.enableSound.bind(this);\n        this.createMapping = this.createMapping.bind(this);\n        this.useMapping = this.useMapping.bind(this);\n    }\n\n    async componentDidMount() {\n        // TODO: check for instruments on the active char map and load those\n        // load instruments if any were in local storage\n        const { charMaps, activeCharMapIdentity } = this.state;\n        if (charMaps && charMaps[activeCharMapIdentity] && charMaps[activeCharMapIdentity].instruments) {\n            await this.loadInstruments(charMaps[activeCharMapIdentity].instruments);\n        }\n        else {\n            // TODO: prompt user to select instruments to load\n        }\n    }\n\n    async loadInstruments(instruments) {\n        this.setState({ isLoading: true });\n        try {\n            await this.instrumentLibrary.load(instruments);\n            this.setState({ isLoading: false });\n        }\n        catch (error) {\n            alert('There was an error loading the instruments');\n            console.log('error loading instruments: ', error);\n            this.setState({ isLoading: false });\n        }\n    }\n\n    enableSound() {\n        Tone.Transport.start();\n        this.setState({ isSoundEnabled: true });\n    }\n\n    setMode(mode) {\n        this.setState({ mode }, () => localStorage.setItem('mode', this.state.mode));\n    }\n\n    updateCharMapping(char, {\n        note,\n        duration,\n        velocity,\n        instrument\n    }) {\n        this.setState(pst => ({\n            charMaps: {\n                ...pst.charMaps,\n                [pst.activeCharMapIdentity]: {\n                    ...pst.charMaps[pst.activeCharMapIdentity],\n                    mapping: {\n                        ...pst.charMaps[pst.activeCharMapIdentity].mapping,\n                        [char]: {\n                            notes: [note],\n                            duration,\n                            velocity,\n                            instrument\n                        }\n                    }\n                }\n            }\n        }), () => localStorage.setItem('charMaps', JSON.stringify(this.state.charMaps)));\n    }\n\n    createMapping(name) {\n        const identity = uuid.v4();\n        const newMapping = {\n            identity,\n            name,\n            instruments: ['piano', 'cello'],\n            mapping: {}\n        };\n\n        // update the state and the local storage\n        this.setState(pst => ({\n            activeCharMapIdentity: identity,\n            charMaps: {\n                ...pst.charMaps,\n                [identity]: newMapping\n            }\n        }), () => {\n            localStorage.setItem('charMaps', JSON.stringify(this.state.charMaps));\n            localStorage.setItem('activeCharMapIdentity', this.state.activeCharMapIdentity);\n        });\n    }\n\n    useMapping(identity) {\n        this.setState({ activeCharMapIdentity: identity }, () => localStorage.setItem('activeCharMapIdentity', this.state.activeCharMapIdentity));\n    }\n\n    resetMapping() {\n        this.setState(pst => ({\n            charMaps: {\n                ...pst.charMaps,\n                [pst.activeCharMapIdentity]: {\n                    ...pst.charMaps[pst.activeCharMapIdentity],\n                    // TODO: in future reset instruments and/or other attributes\n                    mapping: {}\n                }\n            }\n        }), () => localStorage.setItem('charMaps', JSON.stringify(this.state.charMaps)));\n    }\n\n    render() {\n        return (\n            <div className='app'>\n                {\n                    this.state.isLoading ? <LoadingIndicator /> : null\n                }\n                {\n                    this.state.isSoundEnabled ? null : <EnableSound enableSound={this.enableSound} />\n                }\n                <Nav\n                    mode={this.state.mode}\n                    setMode={this.setMode}\n                />\n                <NoteMapping charMap={this.state.charMaps[this.state.activeCharMapIdentity]} />\n                {\n                    this.state.mode === 'MAP' ?\n                    // TODO: make a higher level Map component, then inside that have the MapForm\n                    // and the section to either start new map or change active map with list of avaialeable\n                        <Map\n                            updateCharMapping={this.updateCharMapping}\n                            resetMapping={this.resetMapping}\n                            charMaps={this.state.charMaps}\n                            activeCharMapIdentity={this.state.activeCharMapIdentity}\n                            createMapping={this.createMapping}\n                            useMapping={this.useMapping}\n                        /> :\n                        <Play\n                            charMapping={this.state.charMaps[this.state.activeCharMapIdentity].mapping}\n                            instrumentLibrary={this.instrumentLibrary}    \n                        />\n                }\n            </div>\n        );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}