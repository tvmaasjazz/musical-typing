{"version":3,"sources":["MapForm.js","Play.js","NavItem.js","Nav.js","NoteMappingItem.js","NoteMapping.js","App.js","reportWebVitals.js","index.js"],"names":["MapForm","props","state","chars","note","octave","duration","velocity","channel","handleInputChanges","bind","handleSubmit","event","target","name","value","type","checked","this","setState","preventDefault","char","updateCharToNote","Number","className","onSubmit","htmlFor","onChange","Array","fill","map","_","index","onClick","resetMapping","Component","Play","onKeyPress","charCode","which","String","fromCharCode","charToNote","charMap","midiOutput","playNote","notes","id","cols","rows","NavItem","text","active","setMode","classNames","Nav","mode","NoteMappingItem","NoteMapping","charToNoteArray","Object","entries","entry","values","sort","a","b","charToNoteItem","App","localStorage","getItem","JSON","parse","WebMidi","enable","error","console","log","outputs","setItem","pst","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4727a0de.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './MapForm.css';\n\nclass MapForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chars: '',\n            note: 'C',\n            octave: '3',\n            duration: 2000,\n            velocity: 100,\n            channel: 1\n        };\n\n        this.handleInputChanges = this.handleInputChanges.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChanges(event) {\n        const target = event.target;\n        const name = target.name;\n        let value = target.type === 'checkbox' ? target.checked : target.value;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        // TODO: check that char is only one long and throw alert if not\n\n        // TODO: check if it is a valid char value... for now just block duplicate char, later\n        // could have it be an option to use this input and clear other note\n\n        // or should the it just be you press a char then assign it to a note... might be best\n        // since then multiple chars to same note\n        // I think ideally you even could assign an array of notes to be triggered on a key press\n        // but can add that later with duration as well\n\n        for (const char of this.state.chars) {\n            this.props.updateCharToNote(char, {\n                note: this.state.note + this.state.octave,\n                duration: Number(this.state.duration),\n                velocity: Number(this.state.velocity) / 127.0,\n                channel: Number(this.state.channel)\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"map-form-container\">\n                <form className=\"map-form\" onSubmit={this.handleSubmit}>\n                    <div className=\"map-form__chars\">\n                        <label htmlFor=\"chars\">Char(s): </label>\n                        <input name=\"chars\" type=\"text\" onChange={this.handleInputChanges} />\n                    </div>\n                    <div className=\"map-form__note\">\n                        <label htmlFor=\"note\">Note: </label>\n                        <select name=\"note\" value={this.state.note} onChange={this.handleInputChanges}>\n                            <option value=\"C\">C</option>\n                            <option value=\"C#\">C#</option>\n                            <option value=\"D\">D</option>\n                            <option value=\"D#\">D#/Eb</option>\n                            <option value=\"E\">E</option>\n                            <option value=\"F\">F</option>\n                            <option value=\"F#\">F#/Gb</option>\n                            <option value=\"G\">G</option>\n                            <option value=\"G#\">G#/Ab</option>\n                            <option value=\"A\">A</option>\n                            <option value=\"A#\">A#/Bb</option>\n                            <option value=\"B\">B</option>\n                        </select>\n                    </div>\n                    <div className=\"map-form__octave\">\n                        <label htmlFor=\"octave\">Octave: </label>\n                        <select name=\"octave\" value={this.state.octave} onChange={this.handleInputChanges}>\n                            {Array(11).fill().map((_, index) => (<option value={index - 1} key={index - 1} >{index - 1}</option>))}\n                        </select>\n                    </div>\n                    {/* TODO: ADD channel (instrument), duration, velocity */}\n                    <div className=\"map-form__duration\">\n                        <label htmlFor=\"duration\">Duration(ms): </label>\n                        <input name=\"duration\" type=\"text\" value={this.state.duration} onChange={this.handleInputChanges} />\n                    </div>\n                    <div className=\"map-form__velocity\">\n                        <label htmlFor=\"velocity\">Velocity: </label>\n                        <select name=\"velocity\" value={this.state.velocity} onChange={this.handleInputChanges}>\n                            {Array(128).fill().map((_, index) => (<option value={index} key={index} >{index}</option>))}\n                        </select>\n                    </div>\n                    <div className=\"map-form__channel\">\n                        <label htmlFor=\"channel\">Channel: </label>\n                        <select name=\"channel\" value={this.state.channel} onChange={this.handleInputChanges}>\n                            {Array(16).fill().map((_, index) => (<option value={index + 1} key={index + 1} >{index + 1}</option>))}\n                        </select>\n                    </div>\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n\n                <button className=\"map-form__reset\" onClick={this.props.resetMapping} >Reset Mapping</button>\n            </div>\n        );\n    }\n}\n\nexport default MapForm;","import React, { Component } from 'react';\n\nclass Play extends Component {\n    constructor(props) {\n        super(props);\n\n        this.onKeyPress = this.onKeyPress.bind(this);\n    }\n\n    onKeyPress(event) {\n        // check which key is pressed, use map (passed in props) to output a midi ON and trigger a midi OFF for some delay\n        const charCode = event.which;\n        const char = String.fromCharCode(charCode);\n        \n        // if the char has a mapping set\n        if (this.props.charToNote[char]) {\n            const charMap = this.props.charToNote[char];\n            this.props.midiOutput.playNote(charMap.notes, charMap.channel, {\n                duration: charMap.duration,\n                velocity: charMap.velocity\n            });\n        }\n    }\n\n    render() {\n        return (\n            <textarea name=\"text\" id=\"\" cols=\"30\" rows=\"10\" onKeyPress={this.onKeyPress}></textarea>\n        );\n    }\n}\n\nexport default Play;","import React from 'react';\nimport classNames from 'classnames';\nimport './NavItem.css';\n\nconst NavItem = ({\n    text,\n    active,\n    setMode\n}) => (\n    <button\n        className={classNames('nav__item', {\n            'nav__item--active': active\n        })}\n        onClick={setMode}\n    >\n        {text}\n    </button>\n);\n\nexport default NavItem;","import React from 'react';\nimport NavItem from './NavItem';\nimport './Nav.css';\n\nconst Nav = ({ mode, setMode }) => (\n    <nav className='nav'>\n        <NavItem\n            text='Map'\n            active={mode === 'MAP'}\n            setMode={() => setMode('MAP')}\n        />\n        <NavItem\n            text='Play'\n            active={mode === 'PLAY'}\n            setMode={() => setMode('PLAY')}\n        />\n    </nav>\n);\nexport default Nav;","import React from 'react';\nimport './NoteMappingItem.css';\n\nconst NoteMappingItem = ({\n    note,\n    char\n}) => (\n    <div className='note-mapping__item'>\n        {`${char} - ${note}`}\n    </div>\n);\n\n\nexport default NoteMappingItem;","import React from 'react';\nimport './NoteMapping.css';\nimport NoteMappingItem from './NoteMappingItem';\n\nconst NoteMapping = ({\n    charToNote\n}) => {\n    // set charToNote to sorted array\n    const charToNoteArray = Object.entries(charToNote).map(entry => {\n        return {\n            char: entry[0],\n            values: entry[1]\n        }\n    }).sort((a, b) => {\n        return b < a ? b : a;\n    });\n\n    return (\n        <div className='note-mapping'>\n            {\n                charToNoteArray.map(charToNoteItem => (\n                    <NoteMappingItem\n                        key={charToNoteItem.char}\n                        note={charToNoteItem.values.notes[0]}\n                        char={charToNoteItem.char}\n                    />\n                ))\n            }\n        </div>\n    );\n}\n\n\nexport default NoteMapping;","import React, { Component } from 'react';\nimport WebMidi from 'webmidi';\nimport './App.css';\nimport MapForm from './MapForm';\nimport Play from './Play';\nimport Nav from './Nav';\nimport NoteMapping from './NoteMapping';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        // TODO:\n        // do cleanup stuff... move webmidi to on mount, and then tear down make sure all midi notes have been sent off command\n        // deploy\n        // change it to prompt user to select midi output device\n        // make so can enter multiple notes for a char\n        // make so can map to special keys like ENTER\n        // change so user can have multiple maps\n\n        this.state = {\n            mode: localStorage.getItem('mode') || 'MAP',\n            // mode: 'MAP',\n            charToNote: localStorage.getItem('charToNote') ? JSON.parse(localStorage.getItem('charToNote')) : {},\n            midiOutput: null\n        };\n\n        this.setMode = this.setMode.bind(this);\n        this.updateCharToNote = this.updateCharToNote.bind(this);\n        this.resetMapping = this.resetMapping.bind(this);\n    }\n\n    componentDidMount() {\n        // enable midi\n        WebMidi.enable((error) => {\n            if (error) {\n                console.log('WEB MIDI ERROR: ', error);\n                return;\n            }\n\n            console.log('--OUTPUTS--');\n            console.log(WebMidi.outputs);\n\n            // TODO: prompt user to select midi output to use\n            this.setState({ midiOutput: WebMidi.outputs[0] });\n        });\n    }\n\n    setMode(mode) {\n        this.setState({ mode }, () => localStorage.setItem('mode', this.state.mode));\n    }\n\n    updateCharToNote(char, {\n        note,\n        duration,\n        velocity,\n        channel\n    }) {\n        this.setState(pst => ({\n            charToNote: {\n                ...pst.charToNote,\n                [char]: {\n                    notes: [note],\n                    duration,\n                    velocity,\n                    channel\n                }\n            }\n        }), () => [localStorage.setItem('charToNote', JSON.stringify(this.state.charToNote)), console.log(this.state.charToNote)]);\n    }\n\n    resetMapping() {\n        this.setState({ charToNote: {} }, () => localStorage.setItem('charToNote', '{}'));\n    }\n\n    render() {\n        // map mode and instrument mode\n        // so there should be a global map of string to midi number\n        // you click map and you can see the current mappings below\n        // amnd at the top there is a form where you type the char\n        // hit tab, and then put int the number 0 - 127\n        //c when suibm,itted it updates that value which\n        // should rerender the display below\n        \n        // then you can go back to instrument mode and on that page\n        // listen for keyboard events and then send midi info based on\n        // the mapping\n        // instrument mode will also display what you are typing below \n\n        // return nav bar whioch gets passed func to change the mode\n\n        return (\n            <div className='app'>\n                <Nav\n                    mode={this.state.mode}\n                    setMode={this.setMode}\n                />\n                <NoteMapping charToNote={this.state.charToNote} />\n                {\n                    this.state.mode === 'MAP' ?\n                        <MapForm updateCharToNote={this.updateCharToNote} resetMapping={this.resetMapping} /> :\n                        <Play charToNote={this.state.charToNote} midiOutput={this.state.midiOutput} />\n                }\n            </div>\n        );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}