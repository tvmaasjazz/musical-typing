{"version":3,"sources":["instrument-library/Instrument.js","instrument-library/startingInstruments.js","instrument-library/InstrumentLibrary.js","MapForm.js","Play.js","NavItem.js","Nav.js","NoteMappingItem.js","NoteMapping.js","EnableSound.js","LoadingIndicator.js","App.js","reportWebVitals.js","index.js"],"names":["Instrument","name","noteToFile","this","isLoaded","sampler","instruments","piano","cello","InstrumentLibrary","baseUrl","startingInstruments","instrumentNames","a","map","instrumentName","promises","instrument","push","Promise","res","toneSampler","Tone","urls","onload","onerror","err","console","log","toDestination","all","Object","values","filter","MapForm","props","state","chars","note","octave","duration","velocity","handleInputChanges","bind","handleSubmit","event","target","value","type","checked","setState","preventDefault","char","updateCharMapping","Number","className","onSubmit","htmlFor","onChange","index","Array","fill","_","onClick","resetMapping","Component","Play","instrumentLibrary","onKeyPress","charCode","which","String","fromCharCode","charMapping","charMap","getInstrument","triggerAttackRelease","notes","undefined","id","cols","rows","NavItem","text","active","setMode","classNames","Nav","mode","NoteMappingItem","NoteMapping","charMappingArray","entries","entry","sort","b","charMappingItem","EnableSound","enableSound","LoadingIndicator","App","localStorage","getItem","clear","setItem","isSoundEnabled","isLoading","JSON","parse","loadedInstruments","keys","isArray","length","loadInstruments","load","updateLoadedInstruments","alert","getLoadedInstruments","stringify","start","pst","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c535353.chunk.js","sourcesContent":["\nclass Instrument {\n    constructor({\n        name,\n        noteToFile\n    }) {\n        this.name = name;\n        this.noteToFile = noteToFile;\n        this.isLoaded = false;\n        this.sampler = null;\n    }\n}\n\nexport default Instrument;","import Instrument from './Instrument';\n\nconst instruments = {\n    piano: new Instrument({\n        name: 'piano',\n        noteToFile: {\n            'A0': 'A0.[mp3|ogg]',\n            'A1': 'A1.[mp3|ogg]',\n            'A2': 'A2.[mp3|ogg]',\n            'A3': 'A3.[mp3|ogg]',\n            'A4': 'A4.[mp3|ogg]',\n            'A5': 'A5.[mp3|ogg]',\n            'A6': 'A6.[mp3|ogg]',\n            'A#0': 'As0.[mp3|ogg]',\n            'A#1': 'As1.[mp3|ogg]',\n            'A#2': 'As2.[mp3|ogg]',\n            'A#3': 'As3.[mp3|ogg]',\n            'A#4': 'As4.[mp3|ogg]',\n            'A#5': 'As5.[mp3|ogg]',\n            'A#6': 'As6.[mp3|ogg]',\n            'B0': 'B0.[mp3|ogg]',\n            'B1': 'B1.[mp3|ogg]',\n            'B2': 'B2.[mp3|ogg]',\n            'B3': 'B3.[mp3|ogg]',\n            'B4': 'B4.[mp3|ogg]',\n            'B5': 'B5.[mp3|ogg]',\n            'B6': 'B6.[mp3|ogg]',\n            'C0': 'C0.[mp3|ogg]',\n            'C1': 'C1.[mp3|ogg]',\n            'C2': 'C2.[mp3|ogg]',\n            'C3': 'C3.[mp3|ogg]',\n            'C4': 'C4.[mp3|ogg]',\n            'C5': 'C5.[mp3|ogg]',\n            'C6': 'C6.[mp3|ogg]',\n            'C7': 'C7.[mp3|ogg]',\n            'C#0': 'Cs0.[mp3|ogg]',\n            'C#1': 'Cs1.[mp3|ogg]',\n            'C#2': 'Cs2.[mp3|ogg]',\n            'C#3': 'Cs3.[mp3|ogg]',\n            'C#4': 'Cs4.[mp3|ogg]',\n            'C#5': 'Cs5.[mp3|ogg]',\n            'C#6': 'Cs6.[mp3|ogg]',\n            'D0': 'D0.[mp3|ogg]',\n            'D1': 'D1.[mp3|ogg]',\n            'D2': 'D2.[mp3|ogg]',\n            'D3': 'D3.[mp3|ogg]',\n            'D4': 'D4.[mp3|ogg]',\n            'D5': 'D5.[mp3|ogg]',\n            'D6': 'D6.[mp3|ogg]',\n            'D#0': 'Ds0.[mp3|ogg]',\n            'D#1': 'Ds1.[mp3|ogg]',\n            'D#2': 'Ds2.[mp3|ogg]',\n            'D#3': 'Ds3.[mp3|ogg]',\n            'D#4': 'Ds4.[mp3|ogg]',\n            'D#5': 'Ds5.[mp3|ogg]',\n            'D#6': 'Ds6.[mp3|ogg]',\n            'E0': 'E0.[mp3|ogg]',\n            'E1': 'E1.[mp3|ogg]',\n            'E2': 'E2.[mp3|ogg]',\n            'E3': 'E3.[mp3|ogg]',\n            'E4': 'E4.[mp3|ogg]',\n            'E5': 'E5.[mp3|ogg]',\n            'E6': 'E6.[mp3|ogg]',\n            'F0': 'F0.[mp3|ogg]',\n            'F1': 'F1.[mp3|ogg]',\n            'F2': 'F2.[mp3|ogg]',\n            'F3': 'F3.[mp3|ogg]',\n            'F4': 'F4.[mp3|ogg]',\n            'F5': 'F5.[mp3|ogg]',\n            'F6': 'F6.[mp3|ogg]',\n            'F#0': 'Fs0.[mp3|ogg]',\n            'F#1': 'Fs1.[mp3|ogg]',\n            'F#2': 'Fs2.[mp3|ogg]',\n            'F#3': 'Fs3.[mp3|ogg]',\n            'F#4': 'Fs4.[mp3|ogg]',\n            'F#5': 'Fs5.[mp3|ogg]',\n            'F#6': 'Fs6.[mp3|ogg]',\n            'G0': 'G0.[mp3|ogg]',\n            'G1': 'G1.[mp3|ogg]',\n            'G2': 'G2.[mp3|ogg]',\n            'G3': 'G3.[mp3|ogg]',\n            'G4': 'G4.[mp3|ogg]',\n            'G5': 'G5.[mp3|ogg]',\n            'G6': 'G6.[mp3|ogg]',\n            'G#0': 'Gs0.[mp3|ogg]',\n            'G#1': 'Gs1.[mp3|ogg]',\n            'G#2': 'Gs2.[mp3|ogg]',\n            'G#3': 'Gs3.[mp3|ogg]',\n            'G#4': 'Gs4.[mp3|ogg]',\n            'G#5': 'Gs5.[mp3|ogg]',\n            'G#6': 'Gs6.[mp3|ogg]'\n        }\n    }),\n    cello: new Instrument({\n        name: 'cello',\n        noteToFile: {\n            'E3': 'E3.[mp3|ogg]',\n            'E4': 'E4.[mp3|ogg]',\n            'F2': 'F2.[mp3|ogg]',\n            'F3': 'F3.[mp3|ogg]',\n            'F4': 'F4.[mp3|ogg]',\n            'F#3': 'Fs3.[mp3|ogg]',\n            'F#4': 'Fs4.[mp3|ogg]',\n            'G2': 'G2.[mp3|ogg]',\n            'G3': 'G3.[mp3|ogg]',\n            'G4': 'G4.[mp3|ogg]',\n            'G#2': 'Gs2.[mp3|ogg]',\n            'G#3': 'Gs3.[mp3|ogg]',\n            'G#4': 'Gs4.[mp3|ogg]',\n            'A2': 'A2.[mp3|ogg]',\n            'A3': 'A3.[mp3|ogg]',\n            'A4': 'A4.[mp3|ogg]',\n            'A#2': 'As2.[mp3|ogg]',\n            'A#3': 'As3.[mp3|ogg]',\n            'A#4': 'As4.[mp3|ogg]',\n            'B2': 'B2.[mp3|ogg]',\n            'B3': 'B3.[mp3|ogg]',\n            'B4': 'B4.[mp3|ogg]',\n            'C2': 'C2.[mp3|ogg]',\n            'C3': 'C3.[mp3|ogg]',\n            'C4': 'C4.[mp3|ogg]',\n            'C5': 'C5.[mp3|ogg]',\n            'C#3': 'Cs3.[mp3|ogg]',\n            'C#4': 'Cs4.[mp3|ogg]',\n            'D2': 'D2.[mp3|ogg]',\n            'D3': 'D3.[mp3|ogg]',\n            'D4': 'D4.[mp3|ogg]',\n            'D#2': 'Ds2.[mp3|ogg]',\n            'D#3': 'Ds3.[mp3|ogg]',\n            'D#4': 'Ds4.[mp3|ogg]',\n            'E2': 'E2.[mp3|ogg]'\n        }\n    })\n};\n\nexport default instruments;","import * as Tone from 'tone';\nimport startingInstruments from './startingInstruments';\n\nclass InstrumentLibrary {\n    constructor() {\n        // this.baseUrl = 'https://instrument-samples.s3.amazonaws.com';\n        this.baseUrl = './instruments';\n        // available instruments to be loaded\n        this.instruments = startingInstruments;\n    }\n\n    async load(instrumentNames) {\n        const instruments = instrumentNames.map(instrumentName => this.instruments[instrumentName]);\n        const promises = [];\n    \n        for (const instrument of instruments) {\n            if (instrument.isLoaded) {\n                continue;\n            }\n\n            promises.push(new Promise(res => {\n                const toneSampler = new Tone.Sampler({\n                    baseUrl: `${this.baseUrl}/${instrument.name}/`,\n                    urls: instrument.noteToFile,\n                    onload: () => {\n                        instrument.sampler = toneSampler;\n                        instrument.isLoaded = true;\n                        res();\n                    },\n                    onerror: (err) => {\n                        console.log(err);\n                    }\n                });\n                // TODO: does ths work here or have to be after load?\n                toneSampler.toDestination();\n            }));\n        }\n\n        return await Promise.all(promises);\n    }\n\n    getInstrument(instrumentName) {\n        return this.instruments[instrumentName];\n    }\n\n    getLoadedInstruments() {\n        return Object.values(this.instruments).filter(instrument => instrument.isLoaded);\n    }\n}\n\nexport default InstrumentLibrary;","import React, { Component } from 'react';\nimport './MapForm.css';\n\nclass MapForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chars: '',\n            note: 'C',\n            octave: '3',\n            duration: 2000,\n            velocity: 100,\n            // TODO: handle situation here and below where no instruments passed (or it's just empty array?)\n            instrument: this.props.instruments[0]\n        };\n\n        this.handleInputChanges = this.handleInputChanges.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChanges(event) {\n        const target = event.target;\n        const name = target.name;\n        let value = target.type === 'checkbox' ? target.checked : target.value;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        // TODO: check that char is only one long and throw alert if not\n\n        // TODO: check if it is a valid char value... for now just block duplicate char, later\n        // could have it be an option to use this input and clear other note\n\n        // or should the it just be you press a char then assign it to a note... might be best\n        // since then multiple chars to same note\n        // I think ideally you even could assign an array of notes to be triggered on a key press\n        // but can add that later with duration as well\n\n        for (const char of this.state.chars) {\n            this.props.updateCharMapping(char, {\n                note: this.state.note + this.state.octave,\n                duration: Number(this.state.duration),\n                velocity: Number(this.state.velocity) / 127.0,\n                instrument: this.state.instrument\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"map-form-container\">\n                <form className=\"map-form\" onSubmit={this.handleSubmit}>\n                    <div className=\"map-form__instrument\">\n                        <label htmlFor=\"instrument\">Instrument: </label>\n                        <select name=\"instrument\" value={this.state.instrument} onChange={this.handleInputChanges}>\n                            {this.props.instruments.map((instrument, index) => (<option value={instrument} key={index} >{instrument}</option>))}\n                        </select>\n                    </div>\n                    <div className=\"map-form__chars\">\n                        <label htmlFor=\"chars\">Char(s): </label>\n                        <input name=\"chars\" type=\"text\" onChange={this.handleInputChanges} />\n                    </div>\n                    <div className=\"map-form__note\">\n                        <label htmlFor=\"note\">Note: </label>\n                        <select name=\"note\" value={this.state.note} onChange={this.handleInputChanges}>\n                            <option value=\"C\">C</option>\n                            <option value=\"C#\">C#</option>\n                            <option value=\"D\">D</option>\n                            <option value=\"D#\">D#/Eb</option>\n                            <option value=\"E\">E</option>\n                            <option value=\"F\">F</option>\n                            <option value=\"F#\">F#/Gb</option>\n                            <option value=\"G\">G</option>\n                            <option value=\"G#\">G#/Ab</option>\n                            <option value=\"A\">A</option>\n                            <option value=\"A#\">A#/Bb</option>\n                            <option value=\"B\">B</option>\n                        </select>\n                    </div>\n                    <div className=\"map-form__octave\">\n                        <label htmlFor=\"octave\">Octave: </label>\n                        <select name=\"octave\" value={this.state.octave} onChange={this.handleInputChanges}>\n                            {Array(11).fill().map((_, index) => (<option value={index - 1} key={index - 1} >{index - 1}</option>))}\n                        </select>\n                    </div>\n                    {/* TODO: ADD channel (instrument), duration, velocity */}\n                    <div className=\"map-form__duration\">\n                        <label htmlFor=\"duration\">Duration(ms): </label>\n                        <input name=\"duration\" type=\"text\" value={this.state.duration} onChange={this.handleInputChanges} />\n                    </div>\n                    <div className=\"map-form__velocity\">\n                        <label htmlFor=\"velocity\">Velocity: </label>\n                        <select name=\"velocity\" value={this.state.velocity} onChange={this.handleInputChanges}>\n                            {Array(128).fill().map((_, index) => (<option value={index} key={index} >{index}</option>))}\n                        </select>\n                    </div>\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n\n                <button className=\"map-form__reset\" onClick={this.props.resetMapping} >Reset Mapping</button>\n            </div>\n        );\n    }\n}\n\nexport default MapForm;","import React, { Component } from 'react';\n\nclass Play extends Component {\n    constructor(props) {\n        super(props);\n\n        this.instrumentLibrary = props.instrumentLibrary;\n\n        this.onKeyPress = this.onKeyPress.bind(this);\n    }\n\n    onKeyPress(event) {\n        // check which key is pressed, use map (passed in props) to output a midi ON and trigger a midi OFF for some delay\n        const charCode = event.which;\n        const char = String.fromCharCode(charCode);\n        \n        // if the char has a mapping set\n        if (this.props.charMapping[char]) {\n            const charMap = this.props.charMapping[char];\n           this.instrumentLibrary.getInstrument(charMap.instrument).sampler\n                .triggerAttackRelease(charMap.notes, charMap.duration / 1000.0, undefined, charMap.velocity);\n        }\n    }\n\n    render() {\n        return (\n            <textarea name=\"text\" id=\"\" cols=\"30\" rows=\"10\" onKeyPress={this.onKeyPress}></textarea>\n        );\n    }\n}\n\nexport default Play;","import React from 'react';\nimport classNames from 'classnames';\nimport './NavItem.css';\n\nconst NavItem = ({\n    text,\n    active,\n    setMode\n}) => (\n    <button\n        className={classNames('nav__item', {\n            'nav__item--active': active\n        })}\n        onClick={setMode}\n    >\n        {text}\n    </button>\n);\n\nexport default NavItem;","import React from 'react';\nimport NavItem from './NavItem';\nimport './Nav.css';\n\nconst Nav = ({ mode, setMode }) => (\n    <nav className='nav'>\n        <NavItem\n            text='Map'\n            active={mode === 'MAP'}\n            setMode={() => setMode('MAP')}\n        />\n        <NavItem\n            text='Play'\n            active={mode === 'PLAY'}\n            setMode={() => setMode('PLAY')}\n        />\n    </nav>\n);\nexport default Nav;","import React from 'react';\nimport './NoteMappingItem.css';\n\nconst NoteMappingItem = ({\n    note,\n    char\n}) => (\n    <div className='note-mapping__item'>\n        {`${char} - ${note}`}\n    </div>\n);\n\n\nexport default NoteMappingItem;","import React from 'react';\nimport './NoteMapping.css';\nimport NoteMappingItem from './NoteMappingItem';\n\nconst NoteMapping = ({\n    charMapping\n}) => {\n    // set charMapping to sorted array\n    const charMappingArray = Object.entries(charMapping).map(entry => {\n        return {\n            char: entry[0],\n            values: entry[1]\n        }\n    }).sort((a, b) => {\n        return b < a ? b : a;\n    });\n\n    return (\n        <div className='note-mapping'>\n            {\n                charMappingArray.map(charMappingItem => (\n                    <NoteMappingItem\n                        key={charMappingItem.char}\n                        note={charMappingItem.values.notes[0]}\n                        char={charMappingItem.char}\n                    />\n                ))\n            }\n        </div>\n    );\n}\n\n\nexport default NoteMapping;","import React from 'react';\nimport './EnableSound.css';\n\nconst EnableSound = ({ enableSound }) => (\n    <div className=\"enable-sound\">\n        <button className=\"enable-sound__button\" onClick={enableSound} >Click Here To Enable Sound</button>\n    </div>\n);\nexport default EnableSound;","import './LoadingIndicator.css';\n\nconst LoadingIndicator = () => (\n    <div className=\"loading-indicator\">\n        Loading Instruments...\n    </div>\n);\n\nexport default LoadingIndicator;","import React, { Component } from 'react';\nimport * as Tone from 'tone';\nimport InstrumentLibrary from './instrument-library/InstrumentLibrary';\nimport './App.css';\nimport MapForm from './MapForm';\nimport Play from './Play';\nimport Nav from './Nav';\nimport NoteMapping from './NoteMapping';\nimport EnableSound from './EnableSound';\nimport LoadingIndicator from './LoadingIndicator';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        // TODO:\n        // look at ways to have length of sound in Tone.js\n        // update the form and char mapping situation to play the sampler notes\n        // -- DEPLOY THIS VERSION TELL YVETTE --\n        // try figuring out s3 permissions... probably just wait until next phase\n        // add component for selecting instruments to load when you get to the page\n        // have instruments that were loaded saved in local storage so they load on arriving\n        // change form to select instrument first (then only give options based off that)\n        // once get it where it was but with loaded instruments, stop\n        // make so can enter multiple notes for a char\n        // make so can map to special keys like ENTER\n        // change so user can have multiple maps\n\n        // maybe set something in local storage and check for that to clear info or not?\n        if (!localStorage.getItem('version') || localStorage.getItem('version') !== '.2') {\n            localStorage.clear();\n        }\n        localStorage.setItem('version', '.2');\n\n        this.instrumentLibrary = new InstrumentLibrary();\n        this.state = {\n            isSoundEnabled: false,\n            isLoading: false,\n            mode: localStorage.getItem('mode') || 'MAP',\n            charMapping: localStorage.getItem('charMapping') ? JSON.parse(localStorage.getItem('charMapping')) : {},\n            loadedInstruments: localStorage.getItem('loadedInstruments') ? JSON.parse(localStorage.getItem('loadedInstruments')) : Object.keys(this.instrumentLibrary.instruments)\n        };\n\n        this.setMode = this.setMode.bind(this);\n        this.updateCharMapping = this.updateCharMapping.bind(this);\n        this.resetMapping = this.resetMapping.bind(this);\n        this.enableSound = this.enableSound.bind(this);\n    }\n\n    async componentDidMount() {\n        // load instruments if any were in local storage\n        if (Array.isArray(this.state.loadedInstruments) && this.state.loadedInstruments.length > 0) {\n            await this.loadInstruments(this.state.loadedInstruments);\n        }\n        else {\n            // TODO: prompt user to select instruments to load\n        }\n    }\n\n    async loadInstruments(instruments) {\n        this.setState({ isLoading: true });\n        try {\n            await this.instrumentLibrary.load(instruments);\n            // update the state with the new loaded instruments\n            this.updateLoadedInstruments();\n            this.setState({ isLoading: false });\n        }\n        catch (error) {\n            alert('There was an error loading the instruments');\n            console.log('error loading instruments: ', error);\n            this.setState({ isLoading: false });\n        }\n    }\n\n    updateLoadedInstruments() {\n        const loadedInstruments = this.instrumentLibrary.getLoadedInstruments().map(instrument => instrument.name);\n        this.setState({ loadedInstruments }, () => localStorage.setItem('loadedInstruments', JSON.stringify(loadedInstruments)));\n    }\n\n    enableSound() {\n        // do tone stuff\n        Tone.Transport.start();\n\n        this.setState({ isSoundEnabled: true });\n    }\n\n    setMode(mode) {\n        this.setState({ mode }, () => localStorage.setItem('mode', this.state.mode));\n    }\n\n    updateCharMapping(char, {\n        note,\n        duration,\n        velocity,\n        instrument\n    }) {\n        this.setState(pst => ({\n            // TODO: mapping should have properties at top level for instruments and other settings, then the \n            // mapping itself at a lower level\n            charMapping: {\n                ...pst.charMapping,\n                [char]: {\n                    notes: [note],\n                    duration,\n                    velocity,\n                    instrument\n                }\n            }\n        }), () => localStorage.setItem('charMapping', JSON.stringify(this.state.charMapping)));\n    }\n\n    resetMapping() {\n        this.setState({ charMapping: {} }, () => localStorage.setItem('charMapping', '{}'));\n    }\n\n    render() {\n        return (\n            <div className='app'>\n                {\n                    this.state.isLoading ? <LoadingIndicator /> : null\n                }\n                {\n                    this.state.isSoundEnabled ? null : <EnableSound enableSound={this.enableSound} />\n                }\n                <Nav\n                    mode={this.state.mode}\n                    setMode={this.setMode}\n                />\n                <NoteMapping charMapping={this.state.charMapping} />\n                {\n                    this.state.mode === 'MAP' ?\n                        <MapForm \n                            updateCharMapping={this.updateCharMapping}\n                            resetMapping={this.resetMapping}\n                            instruments={this.state.loadedInstruments}\n                        /> :\n                        <Play\n                            charMapping={this.state.charMapping}\n                            instrumentLibrary={this.instrumentLibrary}    \n                        />\n                }\n            </div>\n        );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}